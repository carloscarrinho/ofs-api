service: sls-offers-api-challenge

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    TABLE_NAME: ${self:custom.tableName}
  
custom:
  tableName: offers-api-table-${self:provider.stage}

plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-typescript

functions:
  getBrand:
    handler: src/handler.getBrand
    name: get-brand
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: brands/{brandId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}
  addBrand:
    handler: src/handler.addBrand
    name: add-brand
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: brands
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}
  addOffer:
    handler: src/handler.addOffer
    name: add-offer
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: offers
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
          - "dynamodb:PutItem"
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}
  getOffer:
    handler: src/handler.getOffer
    name: get-offer
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: offers/{offerId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}
  addLocation:
    handler: src/handler.addLocation
    name: add-location
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: locations
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
          - "dynamodb:PutItem"
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}
  getLocation:
    handler: src/handler.getLocation
    name: get-location
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: locations/{locationId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}
  linkLocation:
    handler: src/handler.linkLocation
    name: link-location
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: offers/link/{locationId}
          method: PATCH
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}

resources:
  Resources:
    OffersApiTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: gsi1pk
            AttributeType: S
          - AttributeName: gsi1sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: gsi1
            KeySchema:
            - AttributeName: gsi1pk
              KeyType: HASH
            - AttributeName: gsi1sk
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput: # for the index
              ReadCapacityUnits: 10
              WriteCapacityUnits: 10
        ProvisionedThroughput: # for the table
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10